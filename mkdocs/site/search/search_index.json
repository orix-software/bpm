{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Bpm is the orix package manager. Bpm downloads your Orix package\u2019s dependencies, compiles your packages, makes distributable packages, and uploads them to 'repo.orix.oric.org', the Orix package registry. This tool is heavily inpired from cargo tools from Rust Langage. Bpm supports C and assembly 6502 language, generate doc from source, code template for ROM, binaries or library for Orix, publish/unpublish to \"repo.oric.orix.org\". Sections Installation How to install bpm. Getting Started To get started with BPM, install bpm and set up your first code. Bpm Guide The guide will give you all you need to know about how to use BPM to develop Orix packages. Other Documentation cc65 website \u2014 Links to official cc65 documentation and tools. Oricutron website","title":"1.1. Introduction"},{"location":"#introduction","text":"Bpm is the orix package manager. Bpm downloads your Orix package\u2019s dependencies, compiles your packages, makes distributable packages, and uploads them to 'repo.orix.oric.org', the Orix package registry. This tool is heavily inpired from cargo tools from Rust Langage. Bpm supports C and assembly 6502 language, generate doc from source, code template for ROM, binaries or library for Orix, publish/unpublish to \"repo.oric.orix.org\".","title":"Introduction"},{"location":"#sections","text":"","title":"Sections"},{"location":"#installation","text":"How to install bpm.","title":"Installation"},{"location":"#getting-started","text":"To get started with BPM, install bpm and set up your first code.","title":"Getting Started"},{"location":"#bpm-guide","text":"The guide will give you all you need to know about how to use BPM to develop Orix packages.","title":"Bpm Guide"},{"location":"#other-documentation","text":"cc65 website \u2014 Links to official cc65 documentation and tools. Oricutron website","title":"Other Documentation"},{"location":"changelog/","text":"Changelog","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"first_step/","text":"First steps First start bpm needs 'Oricutron' and 'cc65' in order to work properly. Theses binaries must be installed and cc65 (as ca65, ar65, ld65 must be in your PATH). Initialize bpm and install plugins Each day \"bpm\" will check if a new version is available and will ask if you want to install this version ~$ bpm it will install all plugins ~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['2024.4']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1']) [Installed] First project We create a binary from which will be loaded from /bin orix folder ~$ mkdir myprgm ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? Press 1 Init .gitignore Init bpm.tml Init src folder Init src/myprgm.c Init VERSION file Add github action main.yml into project: y/N ? Press N initialized ~$ cat src/myprgm.c #include <stdio.h> int main() { printf(\"Hello world\"); return 0; } Launch build ~$ bpm build Creating build/etc/bpm/myprgm/2025.1 Format 2 overhead: 304 304 1 2424 303 Generate file ... -Generate file version: 2 -Truncate reloc table from 304 to 303 (-0.33%) Built : build/bin/myprogram","title":"1.3. First Steps with bpm"},{"location":"first_step/#first-steps","text":"","title":"First steps"},{"location":"first_step/#first-start","text":"bpm needs 'Oricutron' and 'cc65' in order to work properly. Theses binaries must be installed and cc65 (as ca65, ar65, ld65 must be in your PATH).","title":"First start"},{"location":"first_step/#initialize-bpm-and-install-plugins","text":"Each day \"bpm\" will check if a new version is available and will ask if you want to install this version ~$ bpm it will install all plugins ~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['2024.4']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1']) [Installed]","title":"Initialize bpm and install plugins"},{"location":"first_step/#first-project","text":"We create a binary from which will be loaded from /bin orix folder ~$ mkdir myprgm ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? Press 1 Init .gitignore Init bpm.tml Init src folder Init src/myprgm.c Init VERSION file Add github action main.yml into project: y/N ? Press N initialized ~$ cat src/myprgm.c #include <stdio.h> int main() { printf(\"Hello world\"); return 0; } Launch build ~$ bpm build Creating build/etc/bpm/myprgm/2025.1 Format 2 overhead: 304 304 1 2424 303 Generate file ... -Generate file version: 2 -Truncate reloc table from 304 to 303 (-0.33%) Built : build/bin/myprogram","title":"First project"},{"location":"getting_started/","text":"Getting started mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt","title":"Getting started"},{"location":"getting_started/#getting-started","text":"mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt","title":"Getting started"},{"location":"installation/","text":"Installation Guide for bpm bpm does not install Oricutron and cc65, bit are needed for bpm. How to install for Linux mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt rm -f /tmp/bpm.txt g","title":"1.2. Installation"},{"location":"installation/#installation-guide-for-bpm","text":"bpm does not install Oricutron and cc65, bit are needed for bpm. How to install for Linux mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt rm -f /tmp/bpm.txt g","title":"Installation Guide for bpm"},{"location":"package/","text":"Package Layout bpm uses conventions for file placement to make it easy to dive into a new Cargo package: . \u251c\u2500\u2500 bpm.toml \u251c\u2500\u2500 build/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 myprogram.c","title":"Package Layout"},{"location":"package/#package-layout","text":"bpm uses conventions for file placement to make it easy to dive into a new Cargo package: . \u251c\u2500\u2500 bpm.toml \u251c\u2500\u2500 build/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 myprogram.c","title":"Package Layout"},{"location":"tutorial/","text":"Tutorial Binary command (C language) $ mkdir pong $ cd pong $ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized Set oricutron path (global) ~$ bpm config oricutron_path /mnt/c/Users/myfolder/OneDrive/oric/oricutron_plugins/oricutron ~$ bpm run Library (Assembly language only) ~$ mkdir gizmo && cd gizmo ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ?2 Init .gitignore Init bpm.tml Init src folder Init VERSION file Add github action main.yml into project: y/N ?N initialized ~$ tree . \u251c\u2500\u2500 bpm.tml \u251c\u2500\u2500 docs \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 dynamic_lib \u2502 \u2514\u2500\u2500 gizmo.s \u2514\u2500\u2500 VERSION ~$ bpm build Creating build/etc/bpm/gizmo/2025.1 Generate gizmo.lib Building gizmo.llo No build done ~$ tree . \u251c\u2500\u2500 bpm.tml \u251c\u2500\u2500 bpmtmp \u2502 \u2514\u2500\u2500 gizmo.o \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u2514\u2500\u2500 bpm \u2502 \u2502 \u2514\u2500\u2500 gizmo \u2502 \u2502 \u2514\u2500\u2500 2025.1 \u2502 \u2502 \u2514\u2500\u2500 bpm.tml \u2502 \u2514\u2500\u2500 usr \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 gizmo \u2502 \u2502 \u2514\u2500\u2500 2025.1 \u2502 \u2502 \u2514\u2500\u2500 llo \u2502 \u2502 \u2514\u2500\u2500 gizmo.lib \u2502 \u2514\u2500\u2500 share \u2502 \u2514\u2500\u2500 gizmo \u2502 \u2514\u2500\u2500 2025.1 \u251c\u2500\u2500 docs \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 dynamic_lib \u2502 \u251c\u2500\u2500 gizmo.s \u2502 \u251c\u2500\u2500 gizmo_so.o \u2502 \u2514\u2500\u2500 gizmo_so.s \u2514\u2500\u2500 VERSION Add a binary to test a library : This commands add \"curl\" binary name with \"tests/curl.c\" path and \"arg1 arg2\" which will be passed into Orix path bpm config add project binary curl tests/curl.c \"arg1 arg2\" Publish If this command, return an empty line : set | grep BPM BPM_PUBLISH_KEY=yourKey Set a key for publishing ~$ vi ~/.bashrc add : export BPM_PUBLISH_KEY=yourKey $ bpm publish Add a library (ex : netdb) $ bpm search orixsdk 2023.3 - Orix Software Toolkit netdb 2024.4 - Network database operations ksocket 2025.1 - Only use this package in Kernel source code (socket management part) ch395 2024.4 - ch395 low hardware routine. Use socket lib for socket management under Orix kch395 2025.1 - Only for orix kernel inet 2025.1 - Provide inet_aton socket 2025.2 - Socket management https://orix-software.github.io/socketlib/api/ curl 2025.1 - Curl lib for Orix https://orix-software.github.io/curllib/api/ $bpm add netdb@2024.4 Use orixsdk macro Verify if orixsdk plugins is installed (installed flag): bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['2024.4']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1']) [Installed] if the plugins is activated, macro can be loaded like : .include \"SDK_memory.mac\" Add a 'pre' script before main command is launched ~$ mkdir scripts/ ~$ echo \"netchk\" > scripts/network.sub ~$ bpm config set project orix_run_pre_script scripts/network.sub","title":"1.4. Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#binary-command-c-language","text":"$ mkdir pong $ cd pong $ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized Set oricutron path (global) ~$ bpm config oricutron_path /mnt/c/Users/myfolder/OneDrive/oric/oricutron_plugins/oricutron ~$ bpm run","title":"Binary command (C language)"},{"location":"tutorial/#library-assembly-language-only","text":"~$ mkdir gizmo && cd gizmo ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ?2 Init .gitignore Init bpm.tml Init src folder Init VERSION file Add github action main.yml into project: y/N ?N initialized ~$ tree . \u251c\u2500\u2500 bpm.tml \u251c\u2500\u2500 docs \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 dynamic_lib \u2502 \u2514\u2500\u2500 gizmo.s \u2514\u2500\u2500 VERSION ~$ bpm build Creating build/etc/bpm/gizmo/2025.1 Generate gizmo.lib Building gizmo.llo No build done ~$ tree . \u251c\u2500\u2500 bpm.tml \u251c\u2500\u2500 bpmtmp \u2502 \u2514\u2500\u2500 gizmo.o \u251c\u2500\u2500 build \u2502 \u251c\u2500\u2500 etc \u2502 \u2502 \u2514\u2500\u2500 bpm \u2502 \u2502 \u2514\u2500\u2500 gizmo \u2502 \u2502 \u2514\u2500\u2500 2025.1 \u2502 \u2502 \u2514\u2500\u2500 bpm.tml \u2502 \u2514\u2500\u2500 usr \u2502 \u251c\u2500\u2500 lib \u2502 \u2502 \u2514\u2500\u2500 gizmo \u2502 \u2502 \u2514\u2500\u2500 2025.1 \u2502 \u2502 \u2514\u2500\u2500 llo \u2502 \u2502 \u2514\u2500\u2500 gizmo.lib \u2502 \u2514\u2500\u2500 share \u2502 \u2514\u2500\u2500 gizmo \u2502 \u2514\u2500\u2500 2025.1 \u251c\u2500\u2500 docs \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 dynamic_lib \u2502 \u251c\u2500\u2500 gizmo.s \u2502 \u251c\u2500\u2500 gizmo_so.o \u2502 \u2514\u2500\u2500 gizmo_so.s \u2514\u2500\u2500 VERSION Add a binary to test a library : This commands add \"curl\" binary name with \"tests/curl.c\" path and \"arg1 arg2\" which will be passed into Orix path bpm config add project binary curl tests/curl.c \"arg1 arg2\"","title":"Library (Assembly language only)"},{"location":"tutorial/#publish","text":"If this command, return an empty line : set | grep BPM BPM_PUBLISH_KEY=yourKey Set a key for publishing ~$ vi ~/.bashrc add : export BPM_PUBLISH_KEY=yourKey $ bpm publish","title":"Publish"},{"location":"tutorial/#add-a-library-ex-netdb","text":"$ bpm search orixsdk 2023.3 - Orix Software Toolkit netdb 2024.4 - Network database operations ksocket 2025.1 - Only use this package in Kernel source code (socket management part) ch395 2024.4 - ch395 low hardware routine. Use socket lib for socket management under Orix kch395 2025.1 - Only for orix kernel inet 2025.1 - Provide inet_aton socket 2025.2 - Socket management https://orix-software.github.io/socketlib/api/ curl 2025.1 - Curl lib for Orix https://orix-software.github.io/curllib/api/ $bpm add netdb@2024.4","title":"Add a library (ex : netdb)"},{"location":"tutorial/#use-orixsdk-macro","text":"Verify if orixsdk plugins is installed (installed flag): bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['2024.4']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1']) [Installed] if the plugins is activated, macro can be loaded like : .include \"SDK_memory.mac\"","title":"Use orixsdk macro"},{"location":"tutorial/#add-a-pre-script-before-main-command-is-launched","text":"~$ mkdir scripts/ ~$ echo \"netchk\" > scripts/network.sub ~$ bpm config set project orix_run_pre_script scripts/network.sub","title":"Add a 'pre' script before main command is launched"},{"location":"why/","text":"bpm : Build Package Manager bpm is a linux command line tool for Orix development. This command manages various things as : Build code Run code Manage plugins for docs, template code Publish package into Orix repo","title":"2.1. BPM Overview"},{"location":"why/#bpm-build-package-manager","text":"bpm is a linux command line tool for Orix development. This command manages various things as : Build code Run code Manage plugins for docs, template code Publish package into Orix repo","title":"bpm : Build Package Manager"},{"location":"commands/bpm_add/","text":"bpm add : Add a dependencies to current project SYNOPSIS bpm add [options] bpm add package_to_install@version DESCRIPTION add a dependency to current project Examples bpm add twillib@2024.4 bpm add --version OPTIONS --help : display help EXIT STATUS SEE ALSO","title":"2.4.1. bpm add"},{"location":"commands/bpm_add/#bpm-add-add-a-dependencies-to-current-project","text":"","title":"bpm add : Add a dependencies to current project"},{"location":"commands/bpm_add/#synopsis","text":"bpm add [options] bpm add package_to_install@version","title":"SYNOPSIS"},{"location":"commands/bpm_add/#description","text":"add a dependency to current project","title":"DESCRIPTION"},{"location":"commands/bpm_add/#examples","text":"bpm add twillib@2024.4 bpm add --version","title":"Examples"},{"location":"commands/bpm_add/#options","text":"--help : display help","title":"OPTIONS"},{"location":"commands/bpm_add/#exit-status","text":"","title":"EXIT STATUS"},{"location":"commands/bpm_add/#see-also","text":"","title":"SEE ALSO"},{"location":"commands/bpm_addsrc/","text":"addsrc addsrc command can add a folder into build process. In that case, bpm will build src/* and folder in addsrc section. It's not used to have a test program. It's a folder to add and which will be link with main project. bpm addsrc src/plugins","title":"2.4.7. bpm addsrc"},{"location":"commands/bpm_addsrc/#addsrc","text":"addsrc command can add a folder into build process. In that case, bpm will build src/* and folder in addsrc section. It's not used to have a test program. It's a folder to add and which will be link with main project. bpm addsrc src/plugins","title":"addsrc"},{"location":"commands/bpm_build/","text":"bpm-build \u2014 Compile the current package SYNOPSIS bpm build [options] DESCRIPTION Compile local packages and all of their dependencies. bpm build OPTIONS EXIT STATUS SEE ALSO","title":"2.3.1. bpm build"},{"location":"commands/bpm_build/#bpm-build-compile-the-current-package","text":"","title":"bpm-build \u2014 Compile the current package"},{"location":"commands/bpm_build/#synopsis","text":"bpm build [options]","title":"SYNOPSIS"},{"location":"commands/bpm_build/#description","text":"Compile local packages and all of their dependencies. bpm build","title":"DESCRIPTION"},{"location":"commands/bpm_build/#options","text":"","title":"OPTIONS"},{"location":"commands/bpm_build/#exit-status","text":"","title":"EXIT STATUS"},{"location":"commands/bpm_build/#see-also","text":"","title":"SEE ALSO"},{"location":"commands/bpm_config/","text":"bpm config 'bpm config' modify behavior of bpm It can modify main configuration and project configuration. Main parameters are : oricutron_path Set Oricutron path for main (general behavior), value must be path of Oricutron binary with filename binary in the path oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot Project parameters are : name Name of the project version Version of the project codetype Code type of the project (lib is a library, bin a command line [lib|bin]) oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron when bpm run is executed oricutron_path Set Oricutron path for current project default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot orix_run_pre_script Pre submit script : will be added before project command md2hlp Activate md2hlp : enable set to yer, disabled set to no bpm config set \"config set\" can be used to set any parameter in global configuration (main) or project configuration bpm config add project binary : add a source code to build during build stage For example, we want to add curl.c into build stage with the output name called \"curl\" Add a \"curl\" binary into bin list to generate : bpm config add project binary curl tests/curl.c Add args : bpm config add project binary curl tests/curl.c \"arg1 arg2\" In that case, \"bpm run --bin curl\" will launch \"curl\" compiled from tests/curl.c Add a 'pre' script before main command is launched ~$ mkdir scripts/ ~$ echo \"netchk\" > scripts/network.sub ~$ bpm config set project orix_run_pre_script scripts/network.sub","title":"2.2.3. bpm config"},{"location":"commands/bpm_config/#bpm-config","text":"'bpm config' modify behavior of bpm It can modify main configuration and project configuration. Main parameters are : oricutron_path Set Oricutron path for main (general behavior), value must be path of Oricutron binary with filename binary in the path oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot Project parameters are : name Name of the project version Version of the project codetype Code type of the project (lib is a library, bin a command line [lib|bin]) oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron when bpm run is executed oricutron_path Set Oricutron path for current project default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot orix_run_pre_script Pre submit script : will be added before project command md2hlp Activate md2hlp : enable set to yer, disabled set to no","title":"bpm config"},{"location":"commands/bpm_config/#bpm-config-set","text":"\"config set\" can be used to set any parameter in global configuration (main) or project configuration","title":"bpm config set"},{"location":"commands/bpm_config/#bpm-config-add-project-binary-add-a-source-code-to-build-during-build-stage","text":"For example, we want to add curl.c into build stage with the output name called \"curl\" Add a \"curl\" binary into bin list to generate : bpm config add project binary curl tests/curl.c Add args : bpm config add project binary curl tests/curl.c \"arg1 arg2\" In that case, \"bpm run --bin curl\" will launch \"curl\" compiled from tests/curl.c","title":"bpm config add project binary : add a source code to build during build stage"},{"location":"commands/bpm_config/#add-a-pre-script-before-main-command-is-launched","text":"~$ mkdir scripts/ ~$ echo \"netchk\" > scripts/network.sub ~$ bpm config set project orix_run_pre_script scripts/network.sub","title":"Add a 'pre' script before main command is launched"},{"location":"commands/bpm_doc/","text":"bpm doc 'bpm doc' generate several docs, depending of the plugins installed. Generate docs bpm doc md2hlp plugin All docs/{name}.md will be generated into .hlp (for man orix command) and inserted in \"build/usr/share/man/\". md2hlp.cfg into project will be modifyed in order to modify title of .hlp (part Heading1, property : Head) generatedoc plugin Generate docs from source code see asm.md and c.md Change docs target folder use docsfolder param in package section. ex: [package] ... docsfolder = \"mkdocs/docs/\" ...","title":"2.3.2. bpm doc"},{"location":"commands/bpm_doc/#bpm-doc","text":"'bpm doc' generate several docs, depending of the plugins installed.","title":"bpm doc"},{"location":"commands/bpm_doc/#generate-docs","text":"bpm doc","title":"Generate docs"},{"location":"commands/bpm_doc/#md2hlp-plugin","text":"All docs/{name}.md will be generated into .hlp (for man orix command) and inserted in \"build/usr/share/man/\". md2hlp.cfg into project will be modifyed in order to modify title of .hlp (part Heading1, property : Head)","title":"md2hlp plugin"},{"location":"commands/bpm_doc/#generatedoc-plugin","text":"Generate docs from source code see asm.md and c.md","title":"generatedoc plugin"},{"location":"commands/bpm_doc/#change-docs-target-folder","text":"use docsfolder param in package section. ex: [package] ... docsfolder = \"mkdocs/docs/\" ...","title":"Change docs target folder"},{"location":"commands/bpm_install/","text":"bpm install Install all dependencies bpm install","title":"bpm install"},{"location":"commands/bpm_install/#bpm-install","text":"Install all dependencies bpm install","title":"bpm install"},{"location":"commands/bpm_list/","text":"bpm list list project dependencies bpm list","title":"2.4.4. bpm list"},{"location":"commands/bpm_list/#bpm-list","text":"list project dependencies bpm list","title":"bpm list"},{"location":"commands/bpm_new/","text":"bpm new Initialize an new project For a command line program : ~$ mkdir mylib ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized","title":"2.4.5. bpm new"},{"location":"commands/bpm_new/#bpm-new","text":"Initialize an new project For a command line program : ~$ mkdir mylib ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized","title":"bpm new"},{"location":"commands/bpm_package/","text":"bpm package Build package \"src/include/*.s\" will be added into \"/usr/include\" \"src/include/*.inc\" will be added into \"/usr/include/asm\" In that case, if a binary calls theses include, \"bpm build\" will include theses paths automaticly bpm package","title":"2.3.4. bpm doc"},{"location":"commands/bpm_package/#bpm-package","text":"Build package \"src/include/*.s\" will be added into \"/usr/include\" \"src/include/*.inc\" will be added into \"/usr/include/asm\" In that case, if a binary calls theses include, \"bpm build\" will include theses paths automaticly bpm package","title":"bpm package"},{"location":"commands/bpm_plugins/","text":"bpm plugins - Manage plugins A plugin is a tool in order to manage some part of the development. Each day, bpm will try to update plugins, and will ask if plugin must be installed bpm plugins Usage : bpm plugins bpm plugins install Usage : bpm plugins install [plugin_name] [--replace-for-new-project] --replace-for-new-project option will set this plugin version for next project but it does not update it for current project (it needs to be changed in bpm.tml of the project) bpm plugins update Update all plugins : bpm plugins update bpm plugins -h Usage : bpm plugins install -h Displays installed plugins ~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['alpha']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4', 'alpha']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1', '2024.4']) [Installed]","title":"2.2.2. bpm plugins"},{"location":"commands/bpm_plugins/#bpm-plugins-manage-plugins","text":"A plugin is a tool in order to manage some part of the development. Each day, bpm will try to update plugins, and will ask if plugin must be installed","title":"bpm plugins - Manage plugins"},{"location":"commands/bpm_plugins/#bpm-plugins","text":"Usage : bpm plugins","title":"bpm plugins"},{"location":"commands/bpm_plugins/#bpm-plugins-install","text":"Usage : bpm plugins install [plugin_name] [--replace-for-new-project] --replace-for-new-project option will set this plugin version for next project but it does not update it for current project (it needs to be changed in bpm.tml of the project)","title":"bpm plugins install"},{"location":"commands/bpm_plugins/#bpm-plugins-update","text":"Update all plugins : bpm plugins update","title":"bpm plugins update"},{"location":"commands/bpm_plugins/#bpm-plugins-h","text":"Usage : bpm plugins install -h","title":"bpm plugins -h"},{"location":"commands/bpm_plugins/#displays-installed-plugins","text":"~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['alpha']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4', 'alpha']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1', '2024.4']) [Installed]","title":"Displays installed plugins"},{"location":"commands/bpm_publish/","text":"bpm publish - publish package This command can publish package to repo.orix.oric.org. It requires to get have a key in environnement variable \"BPM_PUBLISH_KEY\" In order to have one, post an issue here . For Unix-based systems printenv | grep BPM For Windows echo %BPM_PUBLISH_KEY% bpm publish --official Publish package into official repo (depending of the version). bpm publish --official bpm publish --personnal Publish into personnal repo bpm publish --alpha Publish into alpha repo","title":"2.5.1. bpm publish"},{"location":"commands/bpm_publish/#bpm-publish-publish-package","text":"This command can publish package to repo.orix.oric.org. It requires to get have a key in environnement variable \"BPM_PUBLISH_KEY\" In order to have one, post an issue here . For Unix-based systems printenv | grep BPM For Windows echo %BPM_PUBLISH_KEY%","title":"bpm publish - publish package"},{"location":"commands/bpm_publish/#bpm-publish-official","text":"Publish package into official repo (depending of the version). bpm publish --official","title":"bpm publish --official"},{"location":"commands/bpm_publish/#bpm-publish-personnal","text":"Publish into personnal repo","title":"bpm publish --personnal"},{"location":"commands/bpm_publish/#bpm-publish-alpha","text":"Publish into alpha repo","title":"bpm publish --alpha"},{"location":"commands/bpm_remove/","text":"bpm remove Remove a dependency from the project. Example : bpm remove twillib","title":"2.4.2. bpm remove"},{"location":"commands/bpm_remove/#bpm-remove","text":"Remove a dependency from the project. Example : bpm remove twillib","title":"bpm remove"},{"location":"commands/bpm_run/","text":"bpm run Build an run program. The Oricutron path must be set in main config file or local config file (manifest). add a oricutron path for main config : bpm config set main oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron for current manifest : bpm config set project oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron Behavior for 'bpm run' oricutron_path is missing, it will read oricutron_path from main config. Behavior in oricutron sdcard/ folder If AUTOBOOT is already in etc/autoboot. bpm saves it and restore it. If there is no autoboot before \"bpm run starts\", sur autoboot from bpm will be removed. For autoexecute AUTOBOOT, 'submit' binary must bin in sdcard/bin/ Orix kernel must be greater than 2023.3 Specify command to launch : bpm run --bin hello To specify args : bpm run --bin \"hello -y\" Specify extra args bpm run -- arg1 arg2 Launch a command before the project program (only for bin program) $ mkdir scripts/ $ echo \"netchk\" > scripts/network.sub $ bpm config set project orix_run_pre_script scripts/network.sub $ bpm run It will start scripts/network.sub and the main project binary","title":"2.3.3. bpm run"},{"location":"commands/bpm_run/#bpm-run","text":"Build an run program. The Oricutron path must be set in main config file or local config file (manifest). add a oricutron path for main config : bpm config set main oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron for current manifest : bpm config set project oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron","title":"bpm run"},{"location":"commands/bpm_run/#behavior-for-bpm-run","text":"oricutron_path is missing, it will read oricutron_path from main config.","title":"Behavior for 'bpm run'"},{"location":"commands/bpm_run/#behavior-in-oricutron-sdcard-folder","text":"If AUTOBOOT is already in etc/autoboot. bpm saves it and restore it. If there is no autoboot before \"bpm run starts\", sur autoboot from bpm will be removed. For autoexecute AUTOBOOT, 'submit' binary must bin in sdcard/bin/ Orix kernel must be greater than 2023.3 Specify command to launch : bpm run --bin hello To specify args : bpm run --bin \"hello -y\"","title":"Behavior in oricutron sdcard/ folder"},{"location":"commands/bpm_run/#specify-extra-args","text":"bpm run -- arg1 arg2","title":"Specify extra args"},{"location":"commands/bpm_run/#launch-a-command-before-the-project-program-only-for-bin-program","text":"$ mkdir scripts/ $ echo \"netchk\" > scripts/network.sub $ bpm config set project orix_run_pre_script scripts/network.sub $ bpm run It will start scripts/network.sub and the main project binary","title":"Launch a command before the project program (only for bin program)"},{"location":"commands/bpm_search/","text":"bpm search search a libs from orix registry $ bpm search orixsdk 2023.3 - Orix Software Toolkit netdb 2024.4 - Network database operations ksocket 2025.1 - Only use this package in Kernel source code (socket management part) ch395 2024.4 - ch395 low hardware routine. Use socket lib for socket management under Orix kch395 2025.1 - Only for orix kernel inet 2025.1 - Provide inet_aton socket 2025.2 - Socket management https://orix-software.github.io/socketlib/api/ curl 2025.1 - Curl lib for Orix https://orix-software.github.io/curllib/api/","title":"2.4.6. bpm search"},{"location":"commands/bpm_search/#bpm-search","text":"search a libs from orix registry $ bpm search orixsdk 2023.3 - Orix Software Toolkit netdb 2024.4 - Network database operations ksocket 2025.1 - Only use this package in Kernel source code (socket management part) ch395 2024.4 - ch395 low hardware routine. Use socket lib for socket management under Orix kch395 2025.1 - Only for orix kernel inet 2025.1 - Provide inet_aton socket 2025.2 - Socket management https://orix-software.github.io/socketlib/api/ curl 2025.1 - Curl lib for Orix https://orix-software.github.io/curllib/api/","title":"bpm search"},{"location":"commands/bpm_unpublish/","text":"bpm unpublish bpm unpublish --official Unpublish package from official repo (depending of the version described into bpm.tml) bpm unpublish --personnal Publish into personnal repo bpm unpublish --alpha Publish into alpha repo","title":"2.5.2. bpm unpublish"},{"location":"commands/bpm_unpublish/#bpm-unpublish","text":"","title":"bpm unpublish"},{"location":"commands/bpm_unpublish/#bpm-unpublish-official","text":"Unpublish package from official repo (depending of the version described into bpm.tml)","title":"bpm unpublish --official"},{"location":"commands/bpm_unpublish/#bpm-unpublish-personnal","text":"Publish into personnal repo","title":"bpm unpublish --personnal"},{"location":"commands/bpm_unpublish/#bpm-unpublish-alpha","text":"Publish into alpha repo","title":"bpm unpublish --alpha"},{"location":"commands/bpm_update/","text":"bpm update Uninstall and reinstall all dependencies bpm update","title":"2.4.3. bpm update"},{"location":"commands/bpm_update/#bpm-update","text":"Uninstall and reinstall all dependencies bpm update","title":"bpm update"}]}