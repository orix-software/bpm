{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Bpm is the orix package manager. Bpm downloads your Orix package\u2019s dependencies, compiles your packages, makes distributable packages, and uploads them to 'repo.orix.oric.org', the Orix package registry. This tool is heavily inpired from cargo tools from Rust Langage. Bpm supports C and assembly 6502 language, generate doc from source, code template for ROM, binaries or library for Orix, publish/unpublish to \"repo.oric.orix.org\". Sections Installation How to install bpm. Getting Started To get started with BPM, install bpm and set up your first code. Bpm Guide The guide will give you all you need to know about how to use BPM to develop Orix packages. bpm Reference The reference covers the details of various areas of bpm. Bpm Commands The commands will let you interact with bpm using its command-line interface. Frequently Asked Questions Appendices Glossary Other Documentation Changelog \u2014 Detailed notes about changes in bpm in each release. cc65 website \u2014 Links to official cc65 documentation and tools. Oricutron website","title":"1.1. Introduction"},{"location":"#introduction","text":"Bpm is the orix package manager. Bpm downloads your Orix package\u2019s dependencies, compiles your packages, makes distributable packages, and uploads them to 'repo.orix.oric.org', the Orix package registry. This tool is heavily inpired from cargo tools from Rust Langage. Bpm supports C and assembly 6502 language, generate doc from source, code template for ROM, binaries or library for Orix, publish/unpublish to \"repo.oric.orix.org\".","title":"Introduction"},{"location":"#sections","text":"","title":"Sections"},{"location":"#installation","text":"How to install bpm.","title":"Installation"},{"location":"#getting-started","text":"To get started with BPM, install bpm and set up your first code.","title":"Getting Started"},{"location":"#bpm-guide","text":"The guide will give you all you need to know about how to use BPM to develop Orix packages.","title":"Bpm Guide"},{"location":"#bpm-reference","text":"The reference covers the details of various areas of bpm.","title":"bpm Reference"},{"location":"#bpm-commands","text":"The commands will let you interact with bpm using its command-line interface.","title":"Bpm Commands"},{"location":"#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"#appendices","text":"Glossary","title":"Appendices"},{"location":"#other-documentation","text":"Changelog \u2014 Detailed notes about changes in bpm in each release. cc65 website \u2014 Links to official cc65 documentation and tools. Oricutron website","title":"Other Documentation"},{"location":"changelog/","text":"Changelog","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"first_step/","text":"First steps First start bpm needs 'Oricutron' and 'cc65' in order to work properly. Theses binaries must be installed and cc65 (as ca65, ar65, ld65 must be in your PATH). Initialize bpm and install plugins Each day \"bpm\" will check if a new version is available and will ask if you want to install this version ~$ bpm it will install all plugins ~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['2024.4']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1']) [Installed] First project We create a binary from which will be loaded from /bin orix folder ~$ mkdir myprgm ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? Press 1 Init .gitignore Init bpm.tml Init src folder Init src/myprgm.c Init VERSION file Add github action main.yml into project: y/N ? Press N initialized ~$ cat src/myprgm.c #include <stdio.h> int main() { printf(\"Hello world\"); return 0; } Launch build ~$ bpm build Creating build/etc/bpm/myprgm/2025.1 Format 2 overhead: 304 304 1 2424 303 Generate file ... -Generate file version: 2 -Truncate reloc table from 304 to 303 (-0.33%) Built : build/bin/myprogram","title":"1.3. First Steps with bpm"},{"location":"first_step/#first-steps","text":"","title":"First steps"},{"location":"first_step/#first-start","text":"bpm needs 'Oricutron' and 'cc65' in order to work properly. Theses binaries must be installed and cc65 (as ca65, ar65, ld65 must be in your PATH).","title":"First start"},{"location":"first_step/#initialize-bpm-and-install-plugins","text":"Each day \"bpm\" will check if a new version is available and will ask if you want to install this version ~$ bpm it will install all plugins ~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['2024.4']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1']) [Installed]","title":"Initialize bpm and install plugins"},{"location":"first_step/#first-project","text":"We create a binary from which will be loaded from /bin orix folder ~$ mkdir myprgm ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? Press 1 Init .gitignore Init bpm.tml Init src folder Init src/myprgm.c Init VERSION file Add github action main.yml into project: y/N ? Press N initialized ~$ cat src/myprgm.c #include <stdio.h> int main() { printf(\"Hello world\"); return 0; } Launch build ~$ bpm build Creating build/etc/bpm/myprgm/2025.1 Format 2 overhead: 304 304 1 2424 303 Generate file ... -Generate file version: 2 -Truncate reloc table from 304 to 303 (-0.33%) Built : build/bin/myprogram","title":"First project"},{"location":"getting_started/","text":"Getting started mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt","title":"Getting started"},{"location":"getting_started/#getting-started","text":"mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt","title":"Getting started"},{"location":"installation/","text":"Installation Guide for bpmorix bpm does not install Oricutron and cc65, bit are needed for bpm. How to install for Linux mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt rm -f /tmp/bpm.txt","title":"1.2. Installation"},{"location":"installation/#installation-guide-for-bpmorix","text":"bpm does not install Oricutron and cc65, bit are needed for bpm. How to install for Linux mkdir ~/bin/ curl -o ~/bin/bpm https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/src/bpm export PATH=$PATH:~/bin/ chmod +x ~/bin/bpm curl -o /tmp/bpm.txt https://raw.githubusercontent.com/orix-software/bpm/refs/heads/main/requirements.txt sudo apt install python3-pip pip install -r /tmp/bpm.txt rm -f /tmp/bpm.txt","title":"Installation Guide for bpmorix"},{"location":"package/","text":"Package Layout bpm uses conventions for file placement to make it easy to dive into a new Cargo package: . \u251c\u2500\u2500 bpm.toml \u251c\u2500\u2500 build/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 myprogram.c","title":"Package Layout"},{"location":"package/#package-layout","text":"bpm uses conventions for file placement to make it easy to dive into a new Cargo package: . \u251c\u2500\u2500 bpm.toml \u251c\u2500\u2500 build/ \u251c\u2500\u2500 docs/ \u251c\u2500\u2500 src/ \u2502 \u251c\u2500\u2500 myprogram.c","title":"Package Layout"},{"location":"tutorial/","text":"Tutorial binary command (C language) $ mkdir pong $ cd pong $ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized Set oricutron path (global) ~$ bpm config oricutron_path /mnt/c/Users/myfolder/OneDrive/oric/oricutron_plugins/oricutron ~$ bpm run","title":"1.4. Tutorial"},{"location":"tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"tutorial/#binary-command-c-language","text":"$ mkdir pong $ cd pong $ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized Set oricutron path (global) ~$ bpm config oricutron_path /mnt/c/Users/myfolder/OneDrive/oric/oricutron_plugins/oricutron ~$ bpm run","title":"binary command (C language)"},{"location":"why/","text":"bpm : Build Package Manager bpm is a linux command line tool for Orix development. This command manages various things as : Build code Run code Manage plugins for docs, template code Publish package into Orix repo","title":"2.1. BPM Overview"},{"location":"why/#bpm-build-package-manager","text":"bpm is a linux command line tool for Orix development. This command manages various things as : Build code Run code Manage plugins for docs, template code Publish package into Orix repo","title":"bpm : Build Package Manager"},{"location":"commands/bpm/","text":"bpm Orix build and package manager (2025.1.8) Documentation : https://orix-software.github.io/bpm/ Usage : bpm [OPTIONS] [COMMAND] Options: -V Displays version --disable-check-update Disables check for new version --force-update Force bpm update Commands: new Init a new orix package build Build doc Build docs run Run list List packages add Add dependencies to a manifest file remove Remove dependencies from a manifest file install Install all dependencies from a manifest file search Search package publish Publish package unpublish Unpublish package plugins Manage plugins config Manage config package Manage package addsrc Add src folder to build manifest file","title":"2.2.1. bpm"},{"location":"commands/bpm/#bpm","text":"Orix build and package manager (2025.1.8) Documentation : https://orix-software.github.io/bpm/ Usage : bpm [OPTIONS] [COMMAND] Options: -V Displays version --disable-check-update Disables check for new version --force-update Force bpm update Commands: new Init a new orix package build Build doc Build docs run Run list List packages add Add dependencies to a manifest file remove Remove dependencies from a manifest file install Install all dependencies from a manifest file search Search package publish Publish package unpublish Unpublish package plugins Manage plugins config Manage config package Manage package addsrc Add src folder to build manifest file","title":"bpm"},{"location":"commands/bpm_add/","text":"bpm add : Add a dependencies to current project SYNOPSIS bpm add [options] bpm add package_to_install@version DESCRIPTION add a dependency to current project Examples bpm add twillib@2024.4 bpm add --version OPTIONS --help : display help EXIT STATUS SEE ALSO","title":"2.4.1. bpm add"},{"location":"commands/bpm_add/#bpm-add-add-a-dependencies-to-current-project","text":"","title":"bpm add : Add a dependencies to current project"},{"location":"commands/bpm_add/#synopsis","text":"bpm add [options] bpm add package_to_install@version","title":"SYNOPSIS"},{"location":"commands/bpm_add/#description","text":"add a dependency to current project","title":"DESCRIPTION"},{"location":"commands/bpm_add/#examples","text":"bpm add twillib@2024.4 bpm add --version","title":"Examples"},{"location":"commands/bpm_add/#options","text":"--help : display help","title":"OPTIONS"},{"location":"commands/bpm_add/#exit-status","text":"","title":"EXIT STATUS"},{"location":"commands/bpm_add/#see-also","text":"","title":"SEE ALSO"},{"location":"commands/bpm_addsrc/","text":"","title":"2.4.7. bpm addsrc"},{"location":"commands/bpm_build/","text":"bpm-build \u2014 Compile the current package SYNOPSIS bpm build [options] DESCRIPTION Compile local packages and all of their dependencies. OPTIONS EXIT STATUS SEE ALSO","title":"2.3.1. bpm build"},{"location":"commands/bpm_build/#bpm-build-compile-the-current-package","text":"","title":"bpm-build \u2014 Compile the current package"},{"location":"commands/bpm_build/#synopsis","text":"bpm build [options]","title":"SYNOPSIS"},{"location":"commands/bpm_build/#description","text":"Compile local packages and all of their dependencies.","title":"DESCRIPTION"},{"location":"commands/bpm_build/#options","text":"","title":"OPTIONS"},{"location":"commands/bpm_build/#exit-status","text":"","title":"EXIT STATUS"},{"location":"commands/bpm_build/#see-also","text":"","title":"SEE ALSO"},{"location":"commands/bpm_config/","text":"bpm config 'bpm config' modify behavior of bpm It can modify main configuration and project configuration. Main parameters are : oricutron_path Set Oricutron path for main (general behavior), value must be path of Oricutron binary with filename binary in the path oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot Project parameters are : name Name of the project version Version of the project codetype Code type of the project (lib is a library, bin a command line [lib|bin]) oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron when bpm run is executed oricutron_path Set Oricutron path for current project default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot orix_run_pre_script Pre submit script : will be added before project command md2hlp Activate md2hlp : enable set to yer, disabled set to no bpm config set \"config set\" can be used to set any parameter in global configuration (main) or project configuration bpm config add project binary : add a source code to build during build stage For example, we want to add curl.c into build stage with the output name called \"curl\" Add a \"curl\" binary into bin list to generate : bpm config add project binary curl tests/curl.c In that case, \"bpm run --bin curl\" will launch \"curl\" compiled from tests/curl.c Add a pre script before main command is launched $ mkdir scripts/ $ echo \"netchk\" > scripts/network.sub $ bpm config set project orix_run_pre_script scripts/network.sub","title":"2.2.5. bpm config"},{"location":"commands/bpm_config/#bpm-config","text":"'bpm config' modify behavior of bpm It can modify main configuration and project configuration. Main parameters are : oricutron_path Set Oricutron path for main (general behavior), value must be path of Oricutron binary with filename binary in the path oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot Project parameters are : name Name of the project version Version of the project codetype Code type of the project (lib is a library, bin a command line [lib|bin]) oricutron_replace_autoboot_run Set False or True. False will not modify /etc/autoboot in Oricutron when bpm run is executed oricutron_path Set Oricutron path for current project default_rom_oricutron_for_code Default rom when code type is rom : the .rom will be inserted into this slot orix_run_pre_script Pre submit script : will be added before project command md2hlp Activate md2hlp : enable set to yer, disabled set to no","title":"bpm config"},{"location":"commands/bpm_config/#bpm-config-set","text":"\"config set\" can be used to set any parameter in global configuration (main) or project configuration","title":"bpm config set"},{"location":"commands/bpm_config/#bpm-config-add-project-binary-add-a-source-code-to-build-during-build-stage","text":"For example, we want to add curl.c into build stage with the output name called \"curl\" Add a \"curl\" binary into bin list to generate : bpm config add project binary curl tests/curl.c In that case, \"bpm run --bin curl\" will launch \"curl\" compiled from tests/curl.c","title":"bpm config add project binary : add a source code to build during build stage"},{"location":"commands/bpm_config/#add-a-pre-script-before-main-command-is-launched","text":"$ mkdir scripts/ $ echo \"netchk\" > scripts/network.sub $ bpm config set project orix_run_pre_script scripts/network.sub","title":"Add a pre script before main command is launched"},{"location":"commands/bpm_doc/","text":"bpm doc bpm doc generate several docs, depending of the plugins installed. Generate docs md2hlp plugin bpm doc All docs/{name}.md will be generated into .hlp (for man orix command) and inserted in \"build/usr/share/man/\". md2hlp.cfg into project will be modifyed in order to modify title of .hlp (part Heading1, property : Head) generatedoc pluginn Generate docs from source code see asm.md and c.md","title":"2.3.2. bpm doc"},{"location":"commands/bpm_doc/#bpm-doc","text":"bpm doc generate several docs, depending of the plugins installed.","title":"bpm doc"},{"location":"commands/bpm_doc/#generate-docs","text":"","title":"Generate docs"},{"location":"commands/bpm_doc/#md2hlp-plugin","text":"bpm doc All docs/{name}.md will be generated into .hlp (for man orix command) and inserted in \"build/usr/share/man/\". md2hlp.cfg into project will be modifyed in order to modify title of .hlp (part Heading1, property : Head)","title":"md2hlp plugin"},{"location":"commands/bpm_doc/#generatedoc-pluginn","text":"Generate docs from source code see asm.md and c.md","title":"generatedoc pluginn"},{"location":"commands/bpm_install/","text":"bpm install Install all dependencies","title":"bpm install"},{"location":"commands/bpm_install/#bpm-install","text":"Install all dependencies","title":"bpm install"},{"location":"commands/bpm_list/","text":"bpm list","title":"2.4.4. bpm list"},{"location":"commands/bpm_list/#bpm-list","text":"","title":"bpm list"},{"location":"commands/bpm_new/","text":"bpm new Initialize an new project For a command line program : ~$ mkdir mylib ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized","title":"2.4.5. bpm new"},{"location":"commands/bpm_new/#bpm-new","text":"Initialize an new project For a command line program : ~$ mkdir mylib ~$ bpm new This project is : 1) A binary program 2) A library 3) A rom answer ? 1 Init bpm.tml Init src folder Init src/tmp.c Init VERSION file Add github action main.yml into project: y/N ?N initialized","title":"bpm new"},{"location":"commands/bpm_package/","text":"bpm package Build package \"src/include/*.s\" will be added into \"/usr/include\" \"src/include/*.inc\" will be added into \"/usr/include/asm\" In that case, if a binary calls theses include, \"bpm build\" will include theses paths automaticly","title":"2.3.4. bpm doc"},{"location":"commands/bpm_package/#bpm-package","text":"Build package \"src/include/*.s\" will be added into \"/usr/include\" \"src/include/*.inc\" will be added into \"/usr/include/asm\" In that case, if a binary calls theses include, \"bpm build\" will include theses paths automaticly","title":"bpm package"},{"location":"commands/bpm_plugins/","text":"bpm plugins - Manage plugins A plugin is a tool in order to manage some part of the development. Each day, bpm will try to update plugins, and will ask if plugin must be installed bpm plugins Usage : bpm plugins bpm install Usage : bpm plugins install [plugin_name] Displays installed plugins ~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['alpha']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4', 'alpha']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1', '2024.4']) [Installed]","title":"2.2.4. bpm plugins"},{"location":"commands/bpm_plugins/#bpm-plugins-manage-plugins","text":"A plugin is a tool in order to manage some part of the development. Each day, bpm will try to update plugins, and will ask if plugin must be installed","title":"bpm plugins - Manage plugins"},{"location":"commands/bpm_plugins/#bpm-plugins","text":"Usage : bpm plugins","title":"bpm plugins"},{"location":"commands/bpm_plugins/#bpm-install","text":"Usage : bpm plugins install [plugin_name]","title":"bpm install"},{"location":"commands/bpm_plugins/#displays-installed-plugins","text":"~$ bpm plugins Use 'bpm plugins -h' for 'plugins' help md2hlp: Build markdown into hlp file (text mode) [Installed] orixsdk: Useful ca65 macro for Orix and reloc binary (Mandatory for Orix projects) (Available versions : ['2023.3.0']) [Installed] asm_bin_tpl: Assembly binary template for Orix (Available versions : ['alpha']) [Installed] asm_rom_tpl: Assembly rom template for Orix (Available versions : ['2024.4', 'alpha']) [Installed] github_action: Template for github action (Available versions : ['2024.4']) [Installed] generatedoc: Tool to comment source code and generate markdown (Available versions : ['2025.1', '2024.4']) [Installed]","title":"Displays installed plugins"},{"location":"commands/bpm_publish/","text":"bpm publish - publish package This command can publish package to repo.orix.oric.org. It requires to get have a key in environnement variable \"BPM_PUBLISH_KEY\" In order to have one, post an issue here . For Unix-based systems printenv | grep BPM For Windows echo %BPM_PUBLISH_KEY% bpm publish --official Publish package into official repo (depending of the version). bpm publish --personnal Publish into personnal repo bpm publish --alpha Publish into alpha repo","title":"2.5.1. bpm publish"},{"location":"commands/bpm_publish/#bpm-publish-publish-package","text":"This command can publish package to repo.orix.oric.org. It requires to get have a key in environnement variable \"BPM_PUBLISH_KEY\" In order to have one, post an issue here . For Unix-based systems printenv | grep BPM For Windows echo %BPM_PUBLISH_KEY%","title":"bpm publish - publish package"},{"location":"commands/bpm_publish/#bpm-publish-official","text":"Publish package into official repo (depending of the version).","title":"bpm publish --official"},{"location":"commands/bpm_publish/#bpm-publish-personnal","text":"Publish into personnal repo","title":"bpm publish --personnal"},{"location":"commands/bpm_publish/#bpm-publish-alpha","text":"Publish into alpha repo","title":"bpm publish --alpha"},{"location":"commands/bpm_remove/","text":"bpm remove Remove a dependency from the project. Example : bpm remove twillib","title":"2.4.2. bpm remove"},{"location":"commands/bpm_remove/#bpm-remove","text":"Remove a dependency from the project. Example : bpm remove twillib","title":"bpm remove"},{"location":"commands/bpm_run/","text":"bpm run Build an run program. The Oricutron path must be set in main config file or local config file (manifest). add a oricutron path for main config : bpm config set main oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron for current manifest : bpm config set project oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron Behavior for 'bpm run' oricutron_path is missing, it will read oricutron_path from main config. Behavior in oricutron sdcard/ folder If AUTOBOOT is already in etc/autoboot. bpm saves it and restore it. If there is no autoboot before \"bpm run starts\", sur autoboot from bpm will be removed. For autoexecute AUTOBOOT, 'submit' binary must bin in sdcard/bin/ Orix kernel must be greater than 2023.3 Specify command to launch : bpm run --bin hello To specify args : bpm run --bin \"hello -y\" Specify extra args bpm run -- arg1 arg2 Launch a command before the project program (only for bin program) $ mkdir scripts/ $ echo \"netchk\" > scripts/network.sub $ bpm config set project orix_run_pre_script scripts/network.sub $ bpm run It will start scripts/network.sub and the main project binary","title":"2.3.3. bpm run"},{"location":"commands/bpm_run/#bpm-run","text":"Build an run program. The Oricutron path must be set in main config file or local config file (manifest). add a oricutron path for main config : bpm config set main oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron for current manifest : bpm config set project oricutron_path /mnt/c/Users/mypath/oric/oricutron_plugins/oricutron","title":"bpm run"},{"location":"commands/bpm_run/#behavior-for-bpm-run","text":"oricutron_path is missing, it will read oricutron_path from main config.","title":"Behavior for 'bpm run'"},{"location":"commands/bpm_run/#behavior-in-oricutron-sdcard-folder","text":"If AUTOBOOT is already in etc/autoboot. bpm saves it and restore it. If there is no autoboot before \"bpm run starts\", sur autoboot from bpm will be removed. For autoexecute AUTOBOOT, 'submit' binary must bin in sdcard/bin/ Orix kernel must be greater than 2023.3 Specify command to launch : bpm run --bin hello To specify args : bpm run --bin \"hello -y\"","title":"Behavior in oricutron sdcard/ folder"},{"location":"commands/bpm_run/#specify-extra-args","text":"bpm run -- arg1 arg2","title":"Specify extra args"},{"location":"commands/bpm_run/#launch-a-command-before-the-project-program-only-for-bin-program","text":"$ mkdir scripts/ $ echo \"netchk\" > scripts/network.sub $ bpm config set project orix_run_pre_script scripts/network.sub $ bpm run It will start scripts/network.sub and the main project binary","title":"Launch a command before the project program (only for bin program)"},{"location":"commands/bpm_search/","text":"bpm search","title":"2.4.6. bpm search"},{"location":"commands/bpm_search/#bpm-search","text":"","title":"bpm search"},{"location":"commands/bpm_unpublish/","text":"bpm unpublish bpm unpublish --official Unpublish package from official repo (depending of the version described into bpm.tml) bpm unpublish --personnal Publish into personnal repo bpm unpublish --alpha Publish into alpha repo","title":"2.5.2. bpm unpublish"},{"location":"commands/bpm_unpublish/#bpm-unpublish","text":"","title":"bpm unpublish"},{"location":"commands/bpm_unpublish/#bpm-unpublish-official","text":"Unpublish package from official repo (depending of the version described into bpm.tml)","title":"bpm unpublish --official"},{"location":"commands/bpm_unpublish/#bpm-unpublish-personnal","text":"Publish into personnal repo","title":"bpm unpublish --personnal"},{"location":"commands/bpm_unpublish/#bpm-unpublish-alpha","text":"Publish into alpha repo","title":"bpm unpublish --alpha"},{"location":"commands/bpm_update/","text":"bpm update Uninstall and reinstall all dependencies","title":"2.4.3. bpm update"},{"location":"commands/bpm_update/#bpm-update","text":"Uninstall and reinstall all dependencies","title":"bpm update"}]}